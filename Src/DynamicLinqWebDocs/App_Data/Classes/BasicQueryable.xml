<?xml version="1.0" encoding="utf-8" ?>
<DynLINQDoc xmlns="http://schemas.plainlogic.net/dynamiclinqdocs/2014">

  <Classes>
    <Class name="BasicQueryable" namespace="System.Linq.Dynamic">
      <Description>Provides a set of **static** methods for querying data structures that implement `IQueryable`.</Description>
      <Remarks>The purpose of this class is to mimic several basic methods implemented by the standard `System.Linq.IQueryable&lt;T&gt;`, but that work with `IQueryable`.</Remarks>

      <Methods>

        <Method name="Take" isExtensionMethod="true" returnType="IQueryable">
          <Description>Returns a specified number of contiguous elements from the start of a sequence.</Description>
          <Remarks>`Take` enumerates *source* and *yields* elements until *count* elements have been yielded or *source* contains no more elements.&#xA;&#xA;If *count* is less than or equal to zero, *source* is not enumerated and an empty `IQueryable` is returned.</Remarks>
          <ReturnDescription>A `IQueryable` that contains the specified number of elements from the start of `source`.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The sequence to return elements from.</Description>
            </Argument>
            <Argument name="count" type="int" typeNamespace="System.Int32">
              <Description>The number of elements to return.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Take(IQueryable, Int32)` to return elements from the start of a sequence.</HeaderRemarks>
              <ExampleCode>
                int[] grades = { 59, 82, 70, 56, 92, 98, 85 };

                // Sort the grades in descending order and take the first three.
                IEnumerable&lt;int&gt; topThreeGrades =
                grades.AsQueryable().OrderByDescending(grade => grade).Take(3);

                Console.WriteLine("The top three grades are:");
                foreach (int grade in topThreeGrades)
                  Console.WriteLine(grade);

                /*
                This code produces the following output:

                The top three grades are:
                98
                92
                85
                */
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Skip" isExtensionMethod="true" returnType="IQueryable">
          <Description>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</Description>
          <ReturnDescription>A `IQueryable` that contains elements that occur after the specified index in the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The sequence to return elements from.</Description>
            </Argument>
            <Argument name="count" type="int" typeNamespace="System.Int32">
              <Description>The number of elements to skip before returning the remaining elements.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Skip(IQueryable, Int32)` to skip a specified number of elements in a sorted array and return the remaining elements.</HeaderRemarks>
              <ExampleCode>
                int[] grades = { 59, 82, 70, 56, 92, 98, 85 };

                // Sort the grades in descending order get all except the first three.
                IEnumerable&lt;int&gt; lowerGrades =
                grades.AsQueryable().OrderByDescending(grade => grade).Skip(3);

                Console.WriteLine("All grades except the top three are:");
                foreach (int grade in topThreeGrades)
                  Console.WriteLine(grade);

                /*
                This code produces the following output:

                All grades except the top three are:
                82
                70
                59
                56
                */
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Reverse" isExtensionMethod="true" returnType="IQueryable">
          <Description>Inverts the order of the elements in a sequence.</Description>
          <ReturnDescription>A `IQueryable` whose elements correspond to those of the input sequence in reverse order.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A sequence of values to reverse.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Reverse(IQueryable)` to reverse the order of elements in an array.</HeaderRemarks>
              <ExampleCode>
                char[] apple = { 'a', 'p', 'p', 'l', 'e' };

                // Reverse the order of the characters in the collection.
                IQueryable query = apple.AsQueryable();
                IQueryable reversed = query.Reverse();

                foreach (char chr in reversed)
                  Console.Write(chr + " ");

                /*
                This code produces the following output:

                e l p p a
                */
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Distinct" isExtensionMethod="true" returnType="IQueryable">
          <Description>Returns distinct elements from a sequence.</Description>
          <ReturnDescription>A `IQueryable` contains distinct elements from source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A sequence of values to distinct.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Distinct(IQueryable)` to distinct elements in an array.</HeaderRemarks>
              <ExampleCode>
                char[] apple = { 'a', 'p', 'p', 'l', 'e' };

                // Distinct the characters in the collection.
                IQueryable query = apple.AsQueryable();
                IQueryable distinct = query.Distinct();

                foreach (char chr in distinct)
                  Console.Write(chr + " ");

                /*
                This code produces the following output:

                a p l e
                */
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="DefaultIfEmpty" isExtensionMethod="true" returnType="IQueryable">
          <Description>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</Description>
          <ReturnDescription>A `IQueryable` that contains default(TSource) if source is empty; otherwise, source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A sequence to return a default value for if empty.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `DefaultIfEmpty(IQueryable)` to return default(TSource) if source is empty.</HeaderRemarks>
              <ExampleCode>
                string[] array = { };

                // Get the default if empty.
                IQueryable query = array.AsQueryable();
                IQueryable values = query.DefaultIfEmpty();

                Console.WriteLine("Count: {0}", values.Count());
                Console.WriteLine("Value: {0}", values.Single() ?? "null");

                /*
                This code produces the following output:

                Count: 1
                Value: null
                */
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Any" isExtensionMethod="true" returnType="bool">
          <Description>Determines whether a sequence contains any elements.</Description>
          <ReturnDescription>`true` if the source sequence contains any elements; otherwise, `false`.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A sequence to check for being empty.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Any(IQueryable)` to determine whether a sequence contains any elements.</HeaderRemarks>
              <ExampleCode>
                List&lt;int&gt; numbers = new List&lt;int&gt; { 1, 2 };

                // Determine if the list contains any elements.
                bool hasElements = numbers.AsQueryable().Any();

                Console.WriteLine("The list {0} empty.", hasElements ? "is not" : "is");

                // This code produces the following output:
                //
                // The list is not empty.
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Sum" isExtensionMethod="true" returnType="object">
          <Description>Computes the sum of a sequence of numeric values.</Description>
          <ReturnDescription>The sum of the values in the sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A sequence of numeric values to calculate the sum of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="Count" isExtensionMethod="true" returnType="int">
          <Description>Returns the number of elements in a sequence.</Description>
          <ReturnDescription>The number of elements in the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The `IQueryable` that contains the elements to be counted.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `Count(IQueryable)` to count the elements in a sequence.</HeaderRemarks>
              <ExampleCode>
                string[] fruits = { "apple", "banana", "mango", "orange", "passionfruit", "grape" };

                int numberOfFruits = fruits.AsQueryable().Count();

                Console.WriteLine("There are {0} items in the array.", numberOfFruits);

                // This code produces the following output:
                //
                // There are 6 items in the array.
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="LongCount" isExtensionMethod="true" returnType="long">
          <Description>Returns the number of elements in a sequence.</Description>
          <ReturnDescription>The number of elements in the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The `IQueryable` that contains the elements to be counted.</Description>
            </Argument>
          </Arguments>
          <Examples>
            <Example>
              <HeaderRemarks>The following code example demonstrates how to use `LongCount(IQueryable)` to count the elements in a sequence.</HeaderRemarks>
              <ExampleCode>
                string[] fruits = { "apple", "banana", "mango", "orange", "passionfruit", "grape" };

                long numberOfFruits = fruits.AsQueryable().LongCount();

                Console.WriteLine("There are {0} items in the array.", numberOfFruits);

                // This code produces the following output:
                //
                // There are 6 items in the array.
              </ExampleCode>
            </Example>
          </Examples>
        </Method>

        <Method name="Single" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</Description>
          <ReturnDescription>The single element of the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the single element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="Single" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</Description>
          <ReturnDescription>The single element of the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the single element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="SingleOrDefault" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</Description>
          <ReturnDescription>The single element of the input sequence, or `null` if the sequence contains no elements.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the single element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="SingleOrDefault" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</Description>
          <ReturnDescription>The single element of the input sequence, or `null` if the sequence contains no elements.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the single element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="First" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the first element of a sequence.</Description>
          <ReturnDescription>The first element in source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the first element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="First" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the first element of a sequence.</Description>
          <ReturnDescription>The first element in source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the first element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="FirstOrDefault" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the first element of a sequence, or a default value if the sequence contains no elements.</Description>
          <ReturnDescription>`null` if source is empty; otherwise, the first element in *source*.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the first element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="FirstOrDefault" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the first element of a sequence, or a default value if the sequence contains no elements.</Description>
          <ReturnDescription>`null` if source is empty; otherwise, the first element in *source*.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the first element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="Last" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the last element of a sequence.</Description>
          <ReturnDescription>The last element in source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the last element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="Last" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the last element of a sequence.</Description>
          <ReturnDescription>The last element in source.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the last element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="LastOrDefault" frameworks="Net35" isExtensionMethod="true" returnType="object">
          <Description>Returns the last element of a sequence, or a default value if the sequence contains no elements.</Description>
          <ReturnDescription>`null` if source is empty; otherwise, the last element in *source*.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the last element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="LastOrDefault" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic">
          <Description>Returns the last element of a sequence, or a default value if the sequence contains no elements.</Description>
          <ReturnDescription>`null` if source is empty; otherwise, the last element in *source*.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to return the last element of.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="AsEnumerable" frameworks="Net35" isExtensionMethod="true" returnType="IEnumerable&lt;object&gt;">
          <Description>Returns the input typed as `IEnumerable&lt;T&gt;` of `object`.</Description>
          <ReturnDescription>The input typed as `IEnumerable&lt;T&gt;` of `object`.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The sequence to type as `IEnumerable&lt;T&gt;` of `object`.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="AsEnumerable" frameworks="Net40Plus" isExtensionMethod="true" returnType="IEnumerable&lt;dynamic&gt;">
          <Description>Returns the input typed as `IEnumerable&lt;T&gt;` of `dynamic`.</Description>
          <ReturnDescription>The input typed as `IEnumerable&lt;T&gt;` of `dynamic`.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>The sequence to type as `IEnumerable&lt;T&gt;` of `dynamic`.</Description>
            </Argument>
          </Arguments>
        </Method>

        <Method name="ToDynamicArray" frameworks="Net40Plus" isExtensionMethod="true" returnType="dynamic[]">
          <Description>Creates an array of `dynamic` `objects` from a `IEnumerable`.</Description>
          <ReturnDescription>An array that contains the elements from the input sequence.</ReturnDescription>
          <Arguments>
            <Argument name="source" type="IQueryable" typeNamespace="System.Linq">
              <Description>A `IQueryable` to create an array from.</Description>
            </Argument>
          </Arguments>
        </Method>

      </Methods>
    </Class>
  </Classes>
</DynLINQDoc>