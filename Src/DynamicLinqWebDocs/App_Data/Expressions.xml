<?xml version="1.0" encoding="utf-8" ?>
<DynLINQDoc xmlns="http://schemas.plainlogic.net/dynamiclinqdocs/2014">

  <Expressions>
    <Expression name="Sum">
      <Description>Computes the sum of a sequence of values.</Description>
      <Examples>
        <Example>
          <HeaderRemarks>The following is an example of a `Sum` expression.</HeaderRemarks>
          <ExampleCode>int[] initValues = new int[] { 1, 2, 3, 4, 5 };&#xA;var qry = initValues&#xA;    .AsQueryable()&#xA;    .Select(x => new { strValue = "str", intValue = x })&#xA;    .GroupBy(x => x.strValue);&#xA;&#xA;var result = qry.Select("Sum(intValue)");</ExampleCode>
          <EquivalentCode>int[] initValues = new int[] { 1, 2, 3, 4, 5 };&#xA;var qry = initValues&#xA;    .AsQueryable()&#xA;    .Select(x => new { strValue = "str", intValue = x })&#xA;    .GroupBy(x => x.strValue);&#xA;&#xA;var result = qry.Sum(x => x.intValue);</EquivalentCode>
        </Example>
      </Examples>
    </Expression>

    <Expression name="Contains">
      <Description>Determines whether a sequence contains a specified element.</Description>
      <Remarks>
        Compare to [`in`][0] keyword.

        [0]: /Keywords/In
      </Remarks>
      <Examples>
        <Example>
          <HeaderRemarks>The following code example demonstrates how to use the `Contains` expression to determine whether a sequence contains a specific element.</HeaderRemarks>
          <ExampleCode>var testQuery = baseQuery.Where("@0.Contains(UserName)", containsList).Select("Id");</ExampleCode>
        </Example>
      </Examples>
    </Expression>

    <Expression name="First">
      <Description>Returns the first element of a sequence.</Description>
    </Expression>

    <Expression name="FirstOrDefault">
      <Description>Returns the first element of a sequence, or a default value if the sequence contains no elements.</Description>
    </Expression>

    <Expression name="Last">
      <Description>Returns the last element of a sequence.</Description>
    </Expression>

    <Expression name="LastOrDefault">
      <Description>Returns the last element of a sequence, or a default value if the sequence contains no elements.</Description>
    </Expression>

    <Expression name="Single">
      <Description>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</Description>
    </Expression>

    <Expression name="SingleOrDefault">
      <Description>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</Description>
    </Expression>

    <Expression name="Select">
      <Description>Projects each element of a sequence into a new form.</Description>
    </Expression>

    <Expression name="SelectMany">
      <Description>Projects each element of a sequence to an new sequence and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</Description>
    </Expression>

    <Expression name="Where">
      <Description>Filters a sequence of values based on a predicate.</Description>
    </Expression>

    <Expression name="OrderBy">
      <Description>Sorts the elements of a sequence in ascending order according to a key.</Description>
    </Expression>

    <Expression name="OrderByDescending">
      <Description>Sorts the elements of a sequence in descending order according to a key.</Description>
    </Expression>

    <Expression name="Type(expr)">
      <Description>The expression language permits explicit conversions (or type casting) using the syntax `type(expr)`, where *type* is a type name optionally followed by `?` and *expr* is an expression.</Description>
      <Remarks>
        This syntax may be used to perform the following conversions:

        - Between two types provided `Type.IsAssignableFrom` is true in one or both directions.
        - Between two types provided one or both are interface types.
        - Between the nullable and non-nullable forms of any value type.
        - Between any two types belonging to the set consisting of `SByte`, `Byte`, `Int16`, `UInt16`, `Int32`, `UInt32`, `Int64`, `UInt64`, `Decimal`, `Single`, `Double`, `Char`, any *enum* type, as well as the *nullable* forms of those types.
      </Remarks>
      <Examples>
        <Example>
          <HeaderRemarks>The following is an example of a *Conversion* expression.</HeaderRemarks>
          <ExampleCode>
            public class SimpleValuesModel
            {
              public float FloatValue { get; set; }
              public decimal DecimalValue { get; set; }
            }

            var models = new SimpleValuesModel[] 
            {
              new SimpleValuesModel() 
              {
                FloatValue = 2,
                DecimalValue = 3
              }
            }.AsQueryable();

            var result = models.Select("Decimal(FloatValue) * DecimalValue").First();
          </ExampleCode>
          <EquivalentCode>
            public class SimpleValuesModel
            {
              public float FloatValue { get; set; }
              public decimal DecimalValue { get; set; }
            }

            var models = new SimpleValuesModel[] 
            {
              new SimpleValuesModel() 
              {
                FloatValue = 2,
                DecimalValue = 3
              }
            }.AsQueryable();

            var result = models.Select(x => (Decimal)x.FloatValue * DecimalValue).First();
          </EquivalentCode>
        </Example>
      </Examples>
    </Expression>

  </Expressions>

</DynLINQDoc>